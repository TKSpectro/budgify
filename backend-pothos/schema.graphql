"""The payload returned from the login mutation"""
type AuthPayload {
  id: String!
  token: String!
}

input CreateHousehold {
  name: String!
}

input CreateMessage {
  householdId: ID
  receiverId: ID
  text: String!
}

input CreatePayment {
  description: String
  householdId: ID!
  name: String!
  value: Int!
}

scalar DateTime

type Household {
  createdAt: DateTime!
  id: ID!
  members: [User!]!
  messages: [Message!]!
  name: String!
  owner: User!
  payments: [Payment!]!
  updatedAt: DateTime!
}

input LoginInput {
  email: String!
  password: String!
}

type Message {
  createdAt: DateTime!
  deletedAt: DateTime
  household: Household
  id: ID!
  receiver: User
  sender: User!
  text: String!
  updatedAt: DateTime!
}

input MessageSent {
  householdId: ID!
}

type Mutation {
  createHousehold(input: CreateHousehold!): Household!
  createMessage(input: CreateMessage!): Message!
  createPayment(input: CreatePayment!): Payment!
  login(input: LoginInput!): AuthPayload!
  signUp(input: SignUpInput!): AuthPayload!
}

type Payment {
  createdAt: DateTime!
  description: String
  household: Household!
  id: ID!
  name: String!
  updatedAt: DateTime!
  user: User!
  value: Float!
}

type Query {
  household(id: ID!): Household
  households: [Household!]
  me: User

  """Retrieve a chat with either an other user or a household"""
  messages(householdId: ID!): [Message!]!
  payment(id: ID!): Payment
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

type Subscription {
  messageSent(input: MessageSent!): Message!
  paymentCreated: Payment!
}

type User {
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  hashedPassword: String!
  households: [Household!]!
  id: ID!
  name: String!
  payments: [Payment!]!
  updatedAt: DateTime!
}